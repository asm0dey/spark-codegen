{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"5c475aae-6962-52cb-b39f-edcd89e96b3f","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Spark Magic:\"), mdx(\"h2\", null, \"How High-level Pipelines Become Distributed Hardcore\"), mdx(\"p\", null, \"Pasha Finkelshteyn, JetBrains\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Wazzup!! :money:\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"data class Q<T>(val id: Int, val text: T)\\nobject Main {\\n    @JvmStatic\\n    fun main(args: Array<String>) {\\n\\n        val spark = SparkSession\\n            .builder()\\n            .master(\\\"local[2]\\\")\\n            .appName(\\\"Simple Application\\\").orCreate\\n\\n        val triples = spark\\n            .toDS(listOf(Q(1, 1 to null), Q(2, 2 to \\\"22\\\"), Q(3, 3 to \\\"333\\\")))\\n            .map { (a, b) -> a + b.first to b.second?.length }\\n            .map { it to 1 }\\n            .map { (a, b) -> Triple(a.first, a.second, b) }\\n\\n\\n        val pairs = spark\\n            .toDS(listOf(2 to \\\"hell\\\", 4 to \\\"moon\\\", 6 to \\\"berry\\\"))\\n\\n        triples\\n            .leftJoin(pairs, triples.col(\\\"first\\\").multiply(2).eq(pairs.col(\\\"first\\\")))\\n            .map { (triple, pair) -> Five(triple.first, triple.second, triple.third, pair?.first, pair?.second) }\\n            .groupByKey { it.a }\\n            .reduceGroupsK { v1, v2 -> v1.copy(a = v1.a + v2.a, b = v1.a + v2.a) }\\n            .map { it.second }\\n            .repartition(1)\\n            .withCached {\\n                write()\\n                    .also { it.csv(\\\"csvpath\\\") }\\n                    .also { it.orc(\\\"orcpath\\\") }\\n                showDS()\\n            }\\n\\n\\n\\n        spark.stop()\\n    }\\n\\n    data class Five<A, B, C, D, E>(val a: A, val b: B, val c: C, val d: D, val e: E)\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"fun main() {\\n    withSpark {\\n        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"    withSpark {\\n        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"1\": true,\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1\"\n  }, \"    withSpark {\\n        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n    }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1:2\",\n    \"1:2\": true\n  }, \"        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"3\"\n  }, \"        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"4\": true,\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"4\"\n  }, \"        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"5\": true,\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"5\"\n  }, \"        dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n            .show()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"+-----+------+\\n|first|second|\\n+-----+------+\\n|   12|     m|\\n|   11|     l|\\n|   10|     k|\\n|    9|     j|\\n|    8|     i|\\n|    7|     h|\\n|    6|     g|\\n|    5|     f|\\n|    4|     e|\\n|    3|     d|\\n|    2|     c|\\n|    1|     b|\\n|    0|     a|\\n+-----+------+\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"        listOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n            \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n            .map { it.second - 1 to it.first }\\n            .sortedByDescending { it.first }\\n            .forEach {\\n               println(\\\"first: ${it.first}, second: ${it.second}\\\") }\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1:6\",\n    \"1:6\": true\n  }, \"withSpark {\\n    dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n        \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n        .map { it.second - 1 to it.first }\\n        .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n        .show()\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"1[10:30]\",\n    \"1[10:30]\": true\n  }, \"withSpark(master = \\\"local[4]\\\") {\\n    dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n        \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n        .map { it.second - 1 to it.first }\\n        .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n        .show()\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u041E\\u0447\\u0435\\u043D\\u044C \\u0438\\u043D\\u0442\\u0435\\u0440\\u0435\\u0441\\u043D\\u043E \\u0438 \\u0441\\u043E\\u0432\\u0441\\u0435\\u043C \\u043D\\u0435\\u043F\\u043E\\u043D\\u044F\\u0442\\u043D\\u043E!\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n    \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n    .map { it.second - 1 to it.first }\\n    .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n    .show()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kotlin\"\n  }, \"dsOf(\\\"a\\\" to 1, \\\"b\\\" to 2, \\\"c\\\" to 3, \\\"d\\\" to 4, \\\"e\\\" to 5, \\\"f\\\" to 6,\\n    \\\"g\\\" to 7, \\\"h\\\" to 8, \\\"i\\\" to 9, \\\"j\\\" to 10, \\\"k\\\" to 11, \\\"l\\\" to 12, \\\"m\\\" to 13)\\n    .map { it.second - 1 to it.first }\\n    .sort { arrayOf(it.col(\\\"first\\\").desc()) }\\n    .debugCodegen()\\n    .show()\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"/* 001 */ public Object generate(Object[] references) {\\n/* 002 */   return new GeneratedIteratorForCodegenStage1(references);\\n/* 003 */ }\\n/* 004 */\\n/* 005 */ // codegenStageId=1\\n/* 006 */ final class GeneratedIteratorForCodegenStage1 extends org.apache.spark.sql.execution.BufferedRowIterator {\\n/* 007 */   private Object[] references;\\n/* 008 */   private scala.collection.Iterator[] inputs;\\n/* 009 */   private scala.collection.Iterator localtablescan_input_0;\\n/* 010 */   private int deserializetoobject_argValue_0;\\n/* 011 */   private java.lang.String[] deserializetoobject_mutableStateArray_0 = new java.lang.String[2];\\n/* 012 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter[5];\\n/* 013 */   private java.lang.Integer[] deserializetoobject_mutableStateArray_1 = new java.lang.Integer[1];\\n/* 014 */   private kotlin.Pair[] mapelements_mutableStateArray_0 = new kotlin.Pair[1];\\n/* 015 */\\n/* 016 */   public GeneratedIteratorForCodegenStage1(Object[] references) {\\n/* 017 */     this.references = references;\\n/* 018 */   }\\n/* 019 */\\n/* 020 */   public void init(int index, scala.collection.Iterator[] inputs) {\\n/* 021 */     partitionIndex = index;\\n/* 022 */     this.inputs = inputs;\\n/* 023 */     localtablescan_input_0 = inputs[0];\\n/* 024 */\\n/* 025 */     deserializetoobject_mutableStateArray_2[0] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);\\n/* 026 */     deserializetoobject_mutableStateArray_2[1] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);\\n/* 027 */     deserializetoobject_mutableStateArray_2[2] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);\\n/* 028 */     deserializetoobject_mutableStateArray_2[3] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(1, 32);\\n/* 029 */     deserializetoobject_mutableStateArray_2[4] = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(2, 32);\\n/* 030 */\\n/* 031 */   }\\n/* 032 */\\n/* 033 */   private void mapelements_doConsume_0(kotlin.Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws java.io.IOException {\\n/* 034 */     boolean mapelements_isNull_1 = true;\\n/* 035 */     kotlin.Pair mapelements_value_1 = null;\\n/* 036 */     if (!false) {\\n/* 037 */       mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n/* 038 */\\n/* 039 */       mapelements_isNull_1 = false;\\n/* 040 */       if (!mapelements_isNull_1) {\\n/* 041 */         Object mapelements_funcResult_0 = null;\\n/* 042 */\\n/* 043 */         try {\\n/* 044 */           mapelements_funcResult_0 = ((org.apache.spark.api.java.function.MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n/* 045 */         } catch (Exception e) {\\n/* 046 */           org.apache.spark.unsafe.Platform.throwException(e);\\n/* 047 */         }\\n/* 048 */\\n/* 049 */         if (mapelements_funcResult_0 != null) {\\n/* 050 */           mapelements_value_1 = (kotlin.Pair) mapelements_funcResult_0;\\n/* 051 */         } else {\\n/* 052 */           mapelements_isNull_1 = true;\\n/* 053 */         }\\n/* 054 */\\n/* 055 */       }\\n/* 056 */     }\\n/* 057 */\\n/* 058 */     serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n/* 059 */\\n/* 060 */   }\\n/* 061 */\\n/* 062 */   private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0, UTF8String deserializetoobject_expr_0_0, int deserializetoobject_expr_1_0) throws java.io.IOException {\\n/* 063 */     boolean deserializetoobject_isNull_1 = true;\\n/* 064 */     java.lang.String deserializetoobject_value_1 = null;\\n/* 065 */     if (!false) {\\n/* 066 */       deserializetoobject_isNull_1 = false;\\n/* 067 */       if (!deserializetoobject_isNull_1) {\\n/* 068 */         Object deserializetoobject_funcResult_0 = null;\\n/* 069 */         deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n/* 070 */         deserializetoobject_value_1 = (java.lang.String) deserializetoobject_funcResult_0;\\n/* 071 */\\n/* 072 */       }\\n/* 073 */     }\\n/* 074 */     deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n/* 075 */\\n/* 076 */     deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n/* 077 */\\n/* 078 */     java.lang.Integer deserializetoobject_value_3 = null;\\n/* 079 */     if (!false) {\\n/* 080 */       deserializetoobject_value_3 = java.lang.Integer.valueOf(deserializetoobject_argValue_0);\\n/* 081 */     }\\n/* 082 */     deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n/* 083 */\\n/* 084 */     final kotlin.Pair deserializetoobject_value_0 = false ?\\n/* 085 */     null : new kotlin.Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n/* 086 */\\n/* 087 */     mapelements_doConsume_0(deserializetoobject_value_0, false);\\n/* 088 */\\n/* 089 */   }\\n/* 090 */\\n/* 091 */   private void serializefromobject_doConsume_0(kotlin.Pair serializefromobject_expr_0_0, boolean serializefromobject_exprIsNull_0_0) throws java.io.IOException {\\n/* 092 */     if (serializefromobject_exprIsNull_0_0) {\\n/* 093 */       throw new NullPointerException(((java.lang.String) references[2] /* errMsg */));\\n/* 094 */     }\\n/* 095 */     boolean serializefromobject_isNull_1 = true;\\n/* 096 */     int serializefromobject_value_1 = -1;\\n/* 097 */     if (!false) {\\n/* 098 */       serializefromobject_isNull_1 = false;\\n/* 099 */       if (!serializefromobject_isNull_1) {\\n/* 100 */         Object serializefromobject_funcResult_0 = null;\\n/* 101 */         serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n/* 102 */         serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n/* 103 */\\n/* 104 */       }\\n/* 105 */     }\\n/* 106 */     if (serializefromobject_exprIsNull_0_0) {\\n/* 107 */       throw new NullPointerException(((java.lang.String) references[3] /* errMsg */));\\n/* 108 */     }\\n/* 109 */     boolean serializefromobject_isNull_5 = true;\\n/* 110 */     java.lang.String serializefromobject_value_5 = null;\\n/* 111 */     if (!false) {\\n/* 112 */       serializefromobject_isNull_5 = false;\\n/* 113 */       if (!serializefromobject_isNull_5) {\\n/* 114 */         Object serializefromobject_funcResult_1 = null;\\n/* 115 */         serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n/* 116 */         serializefromobject_value_5 = (java.lang.String) serializefromobject_funcResult_1;\\n/* 117 */\\n/* 118 */       }\\n/* 119 */     }\\n/* 120 */     deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n/* 121 */\\n/* 122 */     UTF8String serializefromobject_value_4 = null;\\n/* 123 */     if (!false) {\\n/* 124 */       serializefromobject_value_4 = org.apache.spark.unsafe.types.UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n/* 125 */     }\\n/* 126 */     deserializetoobject_mutableStateArray_2[4].reset();\\n/* 127 */\\n/* 128 */     deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n/* 129 */\\n/* 130 */     deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n/* 131 */\\n/* 132 */     deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n/* 133 */     append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n/* 134 */\\n/* 135 */   }\\n/* 136 */\\n/* 137 */   protected void processNext() throws java.io.IOException {\\n/* 138 */     while ( localtablescan_input_0.hasNext()) {\\n/* 139 */       InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n/* 140 */       ((org.apache.spark.sql.execution.metric.SQLMetric) references[0] /* numOutputRows */).add(1);\\n/* 141 */       UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n/* 142 */       int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n/* 143 */\\n/* 144 */       deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n/* 145 */       if (shouldStop()) return;\\n/* 146 */     }\\n/* 147 */   }\\n/* 148 */\\n/* 149 */ }\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"import kotlin.Pair;\\nimport org.apache.spark.api.java.function.MapFunction;\\nimport org.apache.spark.sql.catalyst.InternalRow;\\nimport org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter;\\nimport org.apache.spark.sql.execution.BufferedRowIterator;\\nimport org.apache.spark.sql.execution.metric.SQLMetric;\\nimport org.apache.spark.unsafe.Platform;\\nimport org.apache.spark.unsafe.types.UTF8String;\\nimport scala.collection.Iterator;\\n\\nimport java.io.IOException;\\n\\npublic Object generate(Object[]references){return new GeneratedIteratorForCodegenStage1(references);}\\n\\n// codegenStageId=1\\nfinal class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"1\": true,\n    \"className\": \"language-java\",\n    \"metastring\": \"1\"\n  }, \"public Object generate(Object[]references){return new GeneratedIteratorForCodegenStage1(references);}\\n\\n// codegenStageId=1\\nfinal class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"135:145 file=./snippets/1.java\",\n    \"135:145\": true,\n    \"file\": \"./snippets/1.java\"\n  }, \"final class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"57:86 file=./snippets/1.java\",\n    \"57:86\": true,\n    \"file\": \"./snippets/1.java\"\n  }, \"final class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"28:53 file=./snippets/1.java\",\n    \"28:53\": true,\n    \"file\": \"./snippets/1.java\"\n  }, \"final class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"88:132 file=./snippets/1.java\",\n    \"88:132\": true,\n    \"file\": \"./snippets/1.java\"\n  }, \"final class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"124:131 file=./snippets/1.java\",\n    \"124:131\": true,\n    \"file\": \"./snippets/1.java\"\n  }, \"final class GeneratedIteratorForCodegenStage1 extends BufferedRowIterator {\\n    private Object[] references;\\n    private Iterator[] inputs;\\n    private Iterator localtablescan_input_0;\\n    private int deserializetoobject_argValue_0;\\n    private String[] deserializetoobject_mutableStateArray_0 = new String[2];\\n    private UnsafeRowWriter[] deserializetoobject_mutableStateArray_2 = new UnsafeRowWriter[5];\\n    private Integer[] deserializetoobject_mutableStateArray_1 = new Integer[1];\\n    private Pair[] mapelements_mutableStateArray_0 = new Pair[1];\\n\\n    public GeneratedIteratorForCodegenStage1(Object[] references) {\\n        this.references = references;\\n    }\\n\\n    public void init(int index, Iterator[] inputs) {\\n        partitionIndex = index;\\n        this.inputs = inputs;\\n        localtablescan_input_0 = inputs[0];\\n\\n        deserializetoobject_mutableStateArray_2[0] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[1] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[2] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[3] = new UnsafeRowWriter(1, 32);\\n        deserializetoobject_mutableStateArray_2[4] = new UnsafeRowWriter(2, 32);\\n\\n    }\\n\\n    private void mapelements_doConsume_0(Pair mapelements_expr_0_0, boolean mapelements_exprIsNull_0_0) throws IOException {\\n        boolean mapelements_isNull_1 = true;\\n        Pair mapelements_value_1 = null;\\n        if (!false) {\\n            mapelements_mutableStateArray_0[0] = mapelements_expr_0_0;\\n\\n            mapelements_isNull_1 = false;\\n            if (!mapelements_isNull_1) {\\n                Object mapelements_funcResult_0 = null;\\n\\n                try {\\n                    mapelements_funcResult_0 = ((MapFunction) references[1] /* literal */).call(mapelements_mutableStateArray_0[0]);\\n                } catch (Exception e) {\\n                    Platform.throwException(e);\\n                }\\n\\n                if (mapelements_funcResult_0 != null) {\\n                    mapelements_value_1 = (Pair) mapelements_funcResult_0;\\n                } else {\\n                    mapelements_isNull_1 = true;\\n                }\\n\\n            }\\n        }\\n\\n        serializefromobject_doConsume_0(mapelements_value_1, mapelements_isNull_1);\\n\\n    }\\n\\n    private void deserializetoobject_doConsume_0(InternalRow localtablescan_row_0,\\n                                                 UTF8String deserializetoobject_expr_0_0,\\n                                                 int deserializetoobject_expr_1_0) throws IOException {\\n        boolean deserializetoobject_isNull_1 = true;\\n        String deserializetoobject_value_1 = null;\\n        if (!false) {\\n            deserializetoobject_isNull_1 = false;\\n            if (!deserializetoobject_isNull_1) {\\n                Object deserializetoobject_funcResult_0 = null;\\n                deserializetoobject_funcResult_0 = deserializetoobject_expr_0_0.toString();\\n                deserializetoobject_value_1 = (String) deserializetoobject_funcResult_0;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[0] = deserializetoobject_value_1;\\n\\n        deserializetoobject_argValue_0 = deserializetoobject_expr_1_0;\\n\\n        Integer deserializetoobject_value_3 = null;\\n        if (!false) {\\n            deserializetoobject_value_3 = Integer.valueOf(deserializetoobject_argValue_0);\\n        }\\n        deserializetoobject_mutableStateArray_1[0] = deserializetoobject_value_3;\\n\\n        final Pair deserializetoobject_value_0 = false ?\\n                null : new Pair(deserializetoobject_mutableStateArray_0[0], deserializetoobject_mutableStateArray_1[0]);\\n\\n        mapelements_doConsume_0(deserializetoobject_value_0, false);\\n\\n    }\\n\\n    private void serializefromobject_doConsume_0(Pair serializefromobject_expr_0_0,\\n                                                 boolean serializefromobject_exprIsNull_0_0) throws IOException {\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[2] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_1 = true;\\n        int serializefromobject_value_1 = -1;\\n        if (!false) {\\n            serializefromobject_isNull_1 = false;\\n            if (!serializefromobject_isNull_1) {\\n                Object serializefromobject_funcResult_0 = null;\\n                serializefromobject_funcResult_0 = serializefromobject_expr_0_0.getFirst();\\n                serializefromobject_value_1 = (Integer) serializefromobject_funcResult_0;\\n\\n            }\\n        }\\n        if (serializefromobject_exprIsNull_0_0) {\\n            throw new NullPointerException(((String) references[3] /* errMsg */));\\n        }\\n        boolean serializefromobject_isNull_5 = true;\\n        String serializefromobject_value_5 = null;\\n        if (!false) {\\n            serializefromobject_isNull_5 = false;\\n            if (!serializefromobject_isNull_5) {\\n                Object serializefromobject_funcResult_1 = null;\\n                serializefromobject_funcResult_1 = serializefromobject_expr_0_0.getSecond();\\n                serializefromobject_value_5 = (String) serializefromobject_funcResult_1;\\n\\n            }\\n        }\\n        deserializetoobject_mutableStateArray_0[1] = serializefromobject_value_5;\\n\\n        UTF8String serializefromobject_value_4 = null;\\n        if (!false) {\\n            serializefromobject_value_4 = UTF8String.fromString(deserializetoobject_mutableStateArray_0[1]);\\n        }\\n        deserializetoobject_mutableStateArray_2[4].reset();\\n\\n        deserializetoobject_mutableStateArray_2[4].zeroOutNullBytes();\\n\\n        deserializetoobject_mutableStateArray_2[4].write(0, serializefromobject_value_1);\\n\\n        deserializetoobject_mutableStateArray_2[4].write(1, serializefromobject_value_4);\\n        append((deserializetoobject_mutableStateArray_2[4].getRow()));\\n\\n    }\\n\\n    protected void processNext() throws IOException {\\n        while (localtablescan_input_0.hasNext()) {\\n            InternalRow localtablescan_row_0 = (InternalRow) localtablescan_input_0.next();\\n            ((SQLMetric) references[0] /* numOutputRows */).add(1);\\n            UTF8String localtablescan_value_0 = localtablescan_row_0.getUTF8String(0);\\n            int localtablescan_value_1 = localtablescan_row_0.getInt(1);\\n\\n            deserializetoobject_doConsume_0(localtablescan_row_0, localtablescan_value_0, localtablescan_value_1);\\n            if (shouldStop()) return;\\n        }\\n    }\\n\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"5c475aae-6962-52cb-b39f-edcd89e96b3f","slug":"","title":"Spark Magic:"}},"staticQueryHashes":[]}